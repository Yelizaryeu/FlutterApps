// Mocks generated by Mockito 5.4.2 from annotations
// in data/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:convert' as _i9;
import 'dart:typed_data' as _i10;

import 'package:data/data.dart' as _i6;
import 'package:data/entities/post/post_entity.dart' as _i8;
import 'package:data/entities/user/user_entity.dart' as _i7;
import 'package:domain/domain.dart' as _i3;
import 'package:domain/repositories/posts_repository.dart' as _i5;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UsersRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUsersRepository extends _i1.Mock implements _i3.UsersRepository {
  MockUsersRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i3.UserModel>?> getAllUsers() => (super.noSuchMethod(
        Invocation.method(
          #getAllUsers,
          [],
        ),
        returnValue: _i4.Future<List<_i3.UserModel>?>.value(),
      ) as _i4.Future<List<_i3.UserModel>?>);

  @override
  _i4.Future<List<_i3.UserModel>?> searchUser(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchUser,
          [query],
        ),
        returnValue: _i4.Future<List<_i3.UserModel>?>.value(),
      ) as _i4.Future<List<_i3.UserModel>?>);
}

/// A class which mocks [PostsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostsRepository extends _i1.Mock implements _i5.PostsRepository {
  MockPostsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i3.PostModel>> getPosts(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getPosts,
          [id],
        ),
        returnValue: _i4.Future<List<_i3.PostModel>>.value(<_i3.PostModel>[]),
      ) as _i4.Future<List<_i3.PostModel>>);
}

/// A class which mocks [RemoteUsersProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteUsersProvider extends _i1.Mock
    implements _i6.RemoteUsersProvider {
  MockRemoteUsersProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i7.UserEntity>> getUsers() => (super.noSuchMethod(
        Invocation.method(
          #getUsers,
          [],
        ),
        returnValue: _i4.Future<List<_i7.UserEntity>>.value(<_i7.UserEntity>[]),
      ) as _i4.Future<List<_i7.UserEntity>>);

  @override
  _i4.Future<List<_i7.UserEntity>> getUserByName(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserByName,
          [query],
        ),
        returnValue: _i4.Future<List<_i7.UserEntity>>.value(<_i7.UserEntity>[]),
      ) as _i4.Future<List<_i7.UserEntity>>);

  @override
  _i4.Future<List<_i7.UserEntity>> getUserByEmail(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserByEmail,
          [query],
        ),
        returnValue: _i4.Future<List<_i7.UserEntity>>.value(<_i7.UserEntity>[]),
      ) as _i4.Future<List<_i7.UserEntity>>);
}

/// A class which mocks [RemotePostsProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemotePostsProvider extends _i1.Mock
    implements _i6.RemotePostsProvider {
  MockRemotePostsProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i8.PostEntity>> getPosts(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getPosts,
          [id],
        ),
        returnValue: _i4.Future<List<_i8.PostEntity>>.value(<_i8.PostEntity>[]),
      ) as _i4.Future<List<_i8.PostEntity>>);
}

/// A class which mocks [LocalProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalProvider extends _i1.Mock implements _i6.LocalProvider {
  MockLocalProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void usersToCache(List<_i3.UserModel>? users) => super.noSuchMethod(
        Invocation.method(
          #usersToCache,
          [users],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i3.PostModel> getPostsFromCache(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getPostsFromCache,
          [id],
        ),
        returnValue: <_i3.PostModel>[],
      ) as List<_i3.PostModel>);

  @override
  void postsToCache(List<_i3.PostModel>? posts) => super.noSuchMethod(
        Invocation.method(
          #postsToCache,
          [posts],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i2.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i9.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i9.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i9.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i9.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);

  @override
  _i4.Future<_i10.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<_i10.Uint8List>.value(_i10.Uint8List(0)),
      ) as _i4.Future<_i10.Uint8List>);

  @override
  _i4.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i4.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_1(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i4.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
